# Aether Player - –ø—Ä–æ—Å—Ç–æ–π –º–µ–¥–∏–∞–ø–ª–µ–µ—Ä –Ω–∞ Flask + MPV

try:
    from gevent import monkey
    monkey.patch_all(subprocess=False)
    GEVENT_AVAILABLE = True
except ImportError:
    GEVENT_AVAILABLE = False

import os
import json
import time  
import logging
try:
    import gevent
    GEVENT_AVAILABLE = True
except ImportError:
    GEVENT_AVAILABLE = False
import multiprocessing
from flask import Flask, render_template, request, redirect, url_for, abort, jsonify, send_from_directory

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –∞—É–¥–∏–æ-—É–ª—É—á—à–µ–Ω–∏–π
from audio_enhancement import AudioEnhancement

try:
    from flask_socketio import SocketIO
    SOCKETIO_AVAILABLE = True
except ImportError:
    SOCKETIO_AVAILABLE = False

from werkzeug.utils import secure_filename

from werkzeug.utils import secure_filename

# –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å RPi)
def isolated_popen(command, **kwargs):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç subprocess.Popen –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –æ—Ç gevent"""
    import subprocess as std_subprocess
    
    def _run_popen(command, kwargs, result_queue):
        try:
            proc = std_subprocess.Popen(command, **kwargs)
            result_queue.put(proc.pid)
        except Exception as e:
            result_queue.put(f"ERROR: {str(e)}")
    
    result_queue = multiprocessing.Queue()
    process = multiprocessing.Process(target=_run_popen, args=(command, kwargs, result_queue))
    process.start()
    process.join(timeout=5)
    
    if not result_queue.empty():
        result = result_queue.get()
        if isinstance(result, str) and result.startswith("ERROR:"):
            raise Exception(result)
        return result
    return None

def isolated_run(command, **kwargs):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç subprocess.run –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –æ—Ç gevent"""
    import subprocess as std_subprocess
    
    def _run_subprocess(command, kwargs, result_queue):
        try:
            result = std_subprocess.run(command, **kwargs)
            output_data = {'returncode': result.returncode}
            if hasattr(result, 'stdout') and result.stdout:
                output_data['stdout'] = result.stdout
            if hasattr(result, 'stderr') and result.stderr:
                output_data['stderr'] = result.stderr
            result_queue.put(output_data)
        except Exception as e:
            result_queue.put(f"ERROR: {str(e)}")
    
    result_queue = multiprocessing.Queue()
    process = multiprocessing.Process(target=_run_subprocess, args=(command, kwargs, result_queue))
    process.start()
    process.join(timeout=5)
    
    if not result_queue.empty():
        result = result_queue.get()
        if isinstance(result, str) and result.startswith("ERROR:"):
            raise Exception(result)
        return result
    return {'returncode': -1}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

file_handler = logging.FileHandler('aether-player.log')
file_handler.setFormatter(formatter)

error_file_handler = logging.FileHandler('aether-player.error.log')
error_file_handler.setLevel(logging.ERROR)
error_file_handler.setFormatter(formatter)

console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)

logger = logging.getLogger('aether_player')
logger.setLevel(logging.DEBUG)
logger.addHandler(file_handler)
logger.addHandler(error_file_handler)
logger.addHandler(console_handler)
logger.propagate = False

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app = Flask(__name__)

if SOCKETIO_AVAILABLE and GEVENT_AVAILABLE:
    socketio = SocketIO(app, async_mode='gevent')
elif SOCKETIO_AVAILABLE:
    socketio = SocketIO(app, async_mode='threading')
else:
    socketio = None

MEDIA_ROOT = "/mnt/hdd"
MPV_SOCKET = "/tmp/mpv_socket"
MEDIA_EXTENSIONS = ['.flac', '.wav', '.wv', '.dsf', '.dff', '.mp3', '.aac', '.ogg', '.m4a', 
                   '.mkv', '.mp4', '.avi', '.mov', '.wmv', '.flv', '.webm', 
                   '.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff']

def get_file_type(filepath):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞"""
    ext = os.path.splitext(filepath)[1].lower()
    
    audio_extensions = ['.flac', '.wav', '.wv', '.dsf', '.dff', '.mp3', '.aac', '.ogg', '.m4a']
    video_extensions = ['.mkv', '.mp4', '.avi', '.mov', '.wmv', '.flv', '.webm']
    image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff']
    
    if ext in audio_extensions:
        return 'audio'
    elif ext in video_extensions:
        return 'video'
    elif ext in image_extensions:
        return 'image'
    else:
        return 'unknown'

def get_best_audio_device():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ –∫–∞—Ä—Ç—ã
        with open('/proc/asound/cards', 'r') as f:
            cards_content = f.read()
        
        logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ ALSA –∫–∞—Ä—Ç—ã:\n{cards_content}")
        
        # –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤
        import re
        card_lines = cards_content.strip().split('\n')
        detected_cards = {}
        
        for line in card_lines:
            # –§–æ—Ä–º–∞—Ç: " 0 [Headphones     ]: bcm2835_headpho - bcm2835 Headphones"
            match = re.match(r'\s*(\d+)\s+\[([^\]]+)\]\s*:\s*(.+)', line)
            if match:
                card_num = int(match.group(1))
                card_name = match.group(2).strip()
                card_desc = match.group(3).strip()
                detected_cards[card_num] = {'name': card_name, 'desc': card_desc}
        
        logger.debug(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–∞—Ä—Ç—ã: {detected_cards}")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–æ—Ç –ª—É—á—à–µ–≥–æ –∫ —Ö—É–¥—à–µ–º—É) - —Ç–µ–ø–µ—Ä—å –∏—â–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        audio_priorities = [
            ('Scarlett', 'Focusrite'),     # Focusrite Scarlett (–ª—é–±–æ–π –Ω–æ–º–µ—Ä)
            ('USB', 'USB'),                # –õ—é–±–æ–µ USB –∞—É–¥–∏–æ
            ('vc4hdmi0', 'vc4-hdmi'),      # HDMI –≤—ã—Ö–æ–¥ 1
            ('Headphones', 'Headphones')   # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π 3.5mm
        ]
        
        # –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        for priority_name, search_pattern in audio_priorities:
            for card_num, card_info in detected_cards.items():
                card_name = card_info['name']
                card_desc = card_info['desc']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤ –∏–º—è –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
                if (search_pattern.lower() in card_name.lower() or 
                    search_pattern.lower() in card_desc.lower()):
                    
                    alsa_device = f"alsa/hw:{card_num},0"
                    logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {priority_name} -> {card_name} ({alsa_device})")
                    logger.info(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã: {card_desc}")
                    return alsa_device
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.warning("‚ö†Ô∏è –ù–ï –£–î–ê–õ–û–°–¨ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!")
        logger.warning(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã: {list(detected_cards.keys())}")
        logger.warning("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º 'auto' - MPV –≤—ã–±–µ—Ä–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–∞–º")
        logger.warning("üí° –ï—Å–ª–∏ –∑–≤—É–∫–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Scarlett 2i2")
        return "auto"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
        return "auto"

def get_file_duration_ffprobe(filepath):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ ffprobe –∫–∞–∫ fallback –¥–ª—è DSF/DSD —Ñ–∞–π–ª–æ–≤
    """
    try:
        import subprocess
        cmd = [
            'ffprobe', 
            '-v', 'quiet', 
            '-print_format', 'json', 
            '-show_format', 
            filepath
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            import json
            probe_data = json.loads(result.stdout)
            duration = float(probe_data.get('format', {}).get('duration', 0))
            if duration > 0:
                logger.info(f"üìä FFprobe –æ–ø—Ä–µ–¥–µ–ª–∏–ª duration: {duration:.1f}s –¥–ª—è {os.path.basename(filepath)}")
                return duration
        else:
            logger.warning(f"FFprobe error: {result.stderr}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ ffprobe –¥–ª—è {filepath}: {e}")
    
    return None

def save_volume_setting(volume):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª"""
    try:
        volume_file = '/tmp/aether-player-volume.txt'
        with open(volume_file, 'w') as f:
            f.write(str(int(volume)))
        logger.debug(f"üíæ –ì—Ä–æ–º–∫–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {volume}%")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å: {e}")

def save_audio_enhancement_setting(preset):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª"""
    try:
        preset_file = '/tmp/aether-player-audio-enhancement.txt'
        with open(preset_file, 'w') as f:
            f.write(str(preset))
        logger.debug(f"üíæ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {preset}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫—É –∞—É–¥–∏–æ: {e}")

def load_volume_setting():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
    try:
        volume_file = '/tmp/aether-player-volume.txt'
        if os.path.exists(volume_file):
            with open(volume_file, 'r') as f:
                saved_volume = int(f.read().strip())
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 70% –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
                safe_volume = min(saved_volume, 70)
                if saved_volume > 70:
                    logger.info(f"üîí –ì—Ä–æ–º–∫–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {saved_volume}% -> {safe_volume}%")
                else:
                    logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: {safe_volume}%")
                return safe_volume
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å: {e}")
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ 50%
    logger.info("üîä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50%")
    return 50

def load_audio_enhancement_setting():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–µ—Ä–µ–æ—Å—Ü–µ–Ω—ã"""
    try:
        preset_file = '/tmp/aether-player-audio-enhancement.txt'
        if os.path.exists(preset_file):
            with open(preset_file, 'r') as f:
                saved_preset = f.read().strip()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
                if saved_preset in audio_enhancer.PRESETS:
                    logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ: {saved_preset}")
                    return saved_preset
                else:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞: {saved_preset}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫—É –∞—É–¥–∏–æ: {e}")
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—ã–∫–ª—é—á–µ–Ω–æ
    logger.info("üéµ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: off")
    return 'off'

def save_audio_enhancement_setting(preset):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–µ—Ä–µ–æ—Å—Ü–µ–Ω—ã –≤ —Ñ–∞–π–ª"""
    try:
        preset_file = '/tmp/aether-player-audio-enhancement.txt'
        with open(preset_file, 'w') as f:
            f.write(str(preset))
        logger.debug(f"üíæ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {preset}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫—É –∞—É–¥–∏–æ: {e}")

def load_audio_enhancement_setting():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–µ—Ä–µ–æ—Å—Ü–µ–Ω—ã"""
    try:
        preset_file = '/tmp/aether-player-audio-enhancement.txt'
        if os.path.exists(preset_file):
            with open(preset_file, 'r') as f:
                saved_preset = f.read().strip()
                if saved_preset in audio_enhancer.PRESETS:
                    logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ: {saved_preset}")
                    return saved_preset
                else:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ: {saved_preset}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'off'")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫—É –∞—É–¥–∏–æ: {e}")
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—ã–∫–ª—é—á–µ–Ω–æ
    logger.info("üéµ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: off")
    return 'off'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
player_process = None
last_position_update = time.time()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∞—É–¥–∏–æ-—É–ª—É—á—à–µ–Ω–∏–π
audio_enhancer = AudioEnhancement()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞
player_state = {
    'status': 'stopped',
    'track': '',
    'position': 0.0,
    'duration': 0.0,
    'volume': load_volume_setting(),  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
    'playlist': [],
    'playlist_index': -1,
    'audio_enhancement': load_audio_enhancement_setting()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫—É
}

def update_position_if_playing():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ —Ç—Ä–µ–∫ –∏–≥—Ä–∞–µ—Ç"""
    global player_state, last_position_update
    
    current_time = time.time()
    
    if player_state['status'] == 'playing':
        time_elapsed = current_time - last_position_update
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if time_elapsed >= 0.1:  # –ë–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            player_state['position'] += time_elapsed
            last_position_update = current_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü —Ç—Ä–µ–∫–∞
            if player_state['position'] >= player_state['duration'] - 0.5:
                if player_state['playlist'] and player_state['playlist_index'] < len(player_state['playlist']) - 1:
                    handle_playlist_change('next')
                else:
                    player_state['status'] = 'stopped'
                    player_state['track'] = ''
                    player_state['position'] = 0.0
                    player_state['playlist'] = []
                    player_state['playlist_index'] = -1

# MPV —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
def mpv_command(command):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ MPV —á–µ—Ä–µ–∑ IPC —Å–æ–∫–µ—Ç"""
    if not player_process or player_process.poll() is not None:
        ensure_mpv_is_running()
        if not player_process or player_process.poll() is not None:
            return {"status": "error", "message": "mpv –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å"}
    
    try:
        json_command = json.dumps(command) + '\n'
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã MPV: {json_command.strip()}")
        
        if not os.path.exists(MPV_SOCKET):
            logger.error(f"–°–æ–∫–µ—Ç {MPV_SOCKET} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return {"status": "error", "message": "MPV —Å–æ–∫–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
        
        proc_result = isolated_run(
            ['socat', '-t', '2', '-', MPV_SOCKET],
            input=json_command, text=True, check=True, capture_output=True, timeout=2.0
        )
        stdout = proc_result.get('stdout', '')
        
        if stdout:
            try:
                return json.loads(stdout)
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ JSON –≤ –æ—Ç–≤–µ—Ç–µ MPV: {e}")
                return {"status": "error", "message": f"JSON error: {e}"}
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã MPV: {e}")
        return {"status": "error", "message": str(e)}

def get_mpv_property(prop):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ –∏–∑ MPV"""
    response = mpv_command({"command": ["get_property", prop]})
    if response.get("status") == "error":
        return None
    return response.get("data")

def ensure_mpv_is_running():
    """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–æ—Ü–µ—Å—Å–∞ MPV"""
    global player_process
    
    if not player_process or player_process.poll() is not None:
        logger.debug("–ó–∞–ø—É—Å–∫ MPV –ø—Ä–æ—Ü–µ—Å—Å–∞")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        try:
            isolated_run(["killall", "mpv"], check=False)
            time.sleep(0.3)
        except:
            pass
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–æ–∫–µ—Ç
        try:
            if os.path.exists(MPV_SOCKET):
                os.remove(MPV_SOCKET)
        except:
            pass
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º MPV —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–±–µ–∑ --no-video –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∏–¥–µ–æ)
        audio_device = get_best_audio_device()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç–∞—Ä—Ç–æ–≤—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
        safe_startup_volume = int(player_state['volume'] * 1.3)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ MPV —Ñ–æ—Ä–º–∞—Ç
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ø–æ—á–∫—É –∞—É–¥–∏–æ—Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–µ—Ä–µ–æ—Å—Ü–µ–Ω—ã
        enhancement_preset = player_state.get('audio_enhancement', 'off')
        af_string = audio_enhancer.get_mpv_af_string(enhancement_preset)
        
        # –í–ê–ñ–ù–û: –ù–ï –ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨ --audio-device! 
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.
        # –ï—Å–ª–∏ –∑–≤—É–∫–∞ –Ω–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –Ω–æ–º–µ—Ä–µ –∫–∞—Ä—Ç—ã, –∞ –Ω–µ –≤ —ç—Ç–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–µ!
        command = [
            "mpv", 
            "--idle", 
            f"--input-ipc-server={MPV_SOCKET}", 
            f"--audio-device={audio_device}",  # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ù–ï –£–î–ê–õ–Ø–¢–¨!
            f"--volume={safe_startup_volume}", # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
            "--softvol-max=200",               # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å 200% –¥–ª—è –ø–ª–∞–≤–Ω–æ–π —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏
            "--vo=gpu",                        # –í–∏–¥–µ–æ –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ GPU –¥–ª—è HDMI
            "--hwdec=auto",                    # –ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –∞—É–¥–∏–æ, –∏ –≤–∏–¥–µ–æ
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if af_string:
            command.append(f"--af={af_string}")
            logger.info(f"üéµ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∞—É–¥–∏–æ—Ñ–∏–ª—å—Ç—Ä—ã: {af_string}")
        else:
            logger.info("üéµ –ê—É–¥–∏–æ—Ñ–∏–ª—å—Ç—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ MPV –±–µ–∑ –∏–∑–æ–ª—è—Ü–∏–∏ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∑–∞–ø—É—Å–∫–∞
        try:
            import subprocess
            player_process = subprocess.Popen(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            logger.info(f"MPV –∑–∞–ø—É—â–µ–Ω —Å PID {player_process.pid}")
            
            # –ñ–¥–µ–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–∫–µ—Ç–∞
            for i in range(50):  # –º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
                if os.path.exists(MPV_SOCKET):
                    break
                time.sleep(0.1)
            
            if not os.path.exists(MPV_SOCKET):
                logger.error("MPV –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Å–æ–∫–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MPV: {e}")
            return False
        
    return True

def apply_audio_enhancement(preset_name='off'):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–µ—Ä–µ–æ—Å—Ü–µ–Ω—ã"""
    global player_state, audio_enhancer
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ø–æ—á–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
        af_string = audio_enhancer.get_mpv_af_string(preset_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –í–°–ï–ì–î–ê (–¥–∞–∂–µ –µ—Å–ª–∏ MPV –Ω–µ –∑–∞–ø—É—â–µ–Ω)
        player_state['audio_enhancement'] = preset_name
        audio_enhancer.current_preset = preset_name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        save_audio_enhancement_setting(preset_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ MPV
        if not player_process or player_process.poll() is not None:
            logger.info(f"üéµ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ '{preset_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (MPV –Ω–µ –∑–∞–ø—É—â–µ–Ω, –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏)")
            return True
        
        # –ï—Å–ª–∏ MPV –∑–∞–ø—É—â–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
        if af_string:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ MPV –∫–æ–º–∞–Ω–¥—É set_property af
            response = mpv_command({"command": ["set_property", "af", af_string]})
            logger.debug(f"MPV response for af set: {response}")
            if response and response.get("status") != "error":
                logger.info(f"üéµ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∞—É–¥–∏–æ—Ñ–∏–ª—å—Ç—Ä—ã '{preset_name}': {af_string}")
                return True
            else:
                logger.warning(f"MPV –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {response}")
                return True
        else:
            # –û—á–∏—â–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            response = mpv_command({"command": ["set_property", "af", ""]})
            logger.debug(f"MPV response for af clear: {response}")
            if response and response.get("status") != "error":
                logger.info(f"üéµ –ê—É–¥–∏–æ—Ñ–∏–ª—å—Ç—Ä—ã –æ—á–∏—â–µ–Ω—ã (preset: {preset_name})")
                return True
            else:
                logger.warning(f"MPV –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {response}")
                return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        try:
            player_state['audio_enhancement'] = preset_name
            audio_enhancer.current_preset = preset_name
            save_audio_enhancement_setting(preset_name)
            logger.info(f"üéµ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ '{preset_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É")
            return True
        except:
            return False

def stop_mpv_internal():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç MPV –ø—Ä–æ—Ü–µ—Å—Å"""
    global player_process
    
    if player_process and player_process.poll() is None:
        try:
            mpv_command({"command": ["stop"]})
        except:
            pass
        
        try:
            player_process.kill()
        except:
            pass
        
        player_process = None
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    try:
        isolated_run(["killall", "mpv"], check=False)
        isolated_run(["sudo", "killall", "fbi"], check=False)
    except:
        pass

def emit_status_update():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞–º"""
    status_data = {
        'state': player_state['status'],
        'track': player_state['track'],
        'position': round(player_state['position'], 1),
        'duration': round(player_state['duration'], 1),
        'volume': player_state['volume']
    }
    if socketio:
        socketio.emit('status_update', status_data)
def status_update_task():
    """–û—Ç–∫–ª—é—á—ë–Ω–Ω–∞—è —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞"""
    pass

def handle_playlist_change(direction):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ç—Ä–µ–∫–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ"""
    global player_state
    
    if not player_state['playlist']:
        return
    
    current_index = player_state['playlist_index']
    
    if direction == 'next':
        if current_index < len(player_state['playlist']) - 1:
            new_index = current_index + 1
        else:
            return  # –ö–æ–Ω–µ—Ü –ø–ª–µ–π–ª–∏—Å—Ç–∞
    elif direction == 'previous':
        if player_state['position'] > 3.0 or current_index == 0:
            # –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –≤ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
            mpv_command({"command": ["seek", 0, "absolute"]})
            player_state['position'] = 0.0
            return
        else:
            new_index = current_index - 1
    else:
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫
    filepath = player_state['playlist'][new_index]
    mpv_result = mpv_command({"command": ["loadfile", filepath, "replace"]})
    
    if mpv_result.get("status") != "error":
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è —Å MPV –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è duration
        time.sleep(0.5)
        
        # –ü–æ–ª—É—á–∞–µ–º duration —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DSF —Ñ–∞–π–ª–æ–≤
        raw_duration = None
        is_dsf_file = filepath.lower().endswith(('.dsf', '.dff'))
        
        # –î–ª—è DSF —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        retry_count = 10 if is_dsf_file else 5
        sleep_interval = 0.5 if is_dsf_file else 0.2
        
        for attempt in range(retry_count):
            raw_duration = get_mpv_property("duration")
            if raw_duration and raw_duration > 0:
                logger.info(f"üéµ MPV duration –ø–æ–ª—É—á–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt+1}: {raw_duration:.1f}s")
                break
            time.sleep(sleep_interval)
        
        # Fallback –¥–ª—è DSF —Ñ–∞–π–ª–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–µ–º ffprobe
        if not raw_duration and is_dsf_file:
            logger.info("üîç MPV –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å duration –¥–ª—è DSF, –ø—Ä–æ–±—É–µ–º ffprobe...")
            raw_duration = get_file_duration_ffprobe(filepath)
            if raw_duration:
                logger.info(f"‚úÖ FFprobe —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª duration: {raw_duration:.1f}s")
        
        if not raw_duration:
            raw_duration = 100.0
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å duration –¥–ª—è {filepath}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {raw_duration}s")
        
        player_state.update({
            'status': 'playing',
            'track': os.path.basename(filepath),
            'position': 0.0,
            'duration': raw_duration,
            'playlist_index': new_index
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
        global last_position_update
        last_position_update = time.time()
        
        logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Ç—Ä–µ–∫: {player_state['track']} (duration: {raw_duration})")

# API –º–∞—Ä—à—Ä—É—Ç—ã
@app.route("/")
def index():
    return redirect(url_for('browse'))

@app.route("/audio-settings")
def audio_settings():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–µ—Ä–µ–æ—Å—Ü–µ–Ω—ã"""
    return render_template("audio_settings.html")

@app.route("/browse/")
@app.route("/browse/<path:subpath>")
def browse(subpath=""):
    current_path = os.path.join(MEDIA_ROOT, subpath)
    if not os.path.realpath(current_path).startswith(os.path.realpath(MEDIA_ROOT)):
        abort(403)
    if not os.path.isdir(current_path):
        abort(404)
    
    items = os.listdir(current_path)
    folders = sorted([i for i in items if os.path.isdir(os.path.join(current_path, i))])
    files = sorted([i for i in items if os.path.isfile(os.path.join(current_path, i))])
    parent_path = os.path.dirname(subpath) if subpath else None
    
    return render_template("index.html", 
                         current_subpath=subpath, 
                         folders=folders, 
                         files=files, 
                         parent_path=parent_path)

@app.route('/media/<path:filepath>')
def media_file(filepath):
    return send_from_directory(MEDIA_ROOT, filepath)

@app.route('/get_status')
def get_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–ª–µ–µ—Ä–∞"""
    update_position_if_playing()
    
    return jsonify({
        'state': player_state['status'],
        'track': player_state['track'],
        'position': round(player_state['position'], 1),
        'duration': round(player_state['duration'], 1),
        'volume': player_state['volume'],
        'audio_enhancement': player_state.get('audio_enhancement', 'off')
    })

@app.route("/play", methods=['POST'])
def play():
    """–ù–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    global player_state
    
    file_subpath = request.form.get('filepath')
    logger.info(f"–ó–∞–ø—Ä–æ—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {file_subpath}")
    
    full_path = os.path.join(MEDIA_ROOT, file_subpath)
    file_type = get_file_type(full_path)
    
    # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º fbi
    if file_type == 'image':
        logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file_subpath}")
        isolated_run(["sudo", "killall", "fbi"], check=False)
        command = ["sudo", "fbi", "-T", "1", "-a", "--noverbose", full_path]
        from subprocess import DEVNULL
        isolated_popen(command, stdout=DEVNULL, stderr=DEVNULL)
        return jsonify({'status': 'ok', 'message': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ'})
    
    # –î–ª—è –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º MPV
    if file_type not in ['audio', 'video']:
        return jsonify({'status': 'error', 'message': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'})
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º MPV
    ensure_mpv_is_running()
    isolated_run(["sudo", "killall", "fbi"], check=False)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–µ–π–ª–∏—Å—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
    current_dir = os.path.dirname(full_path)
    all_files = os.listdir(current_dir)
    playlist = []
    
    for f in sorted(all_files):
        file_path = os.path.join(current_dir, f)
        if get_file_type(file_path) in ['audio', 'video']:
            playlist.append(file_path)
    
    try:
        playlist_index = playlist.index(full_path)
    except ValueError:
        playlist = [full_path]
        playlist_index = 0
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ MPV
    mpv_result = mpv_command({"command": ["loadfile", full_path, "replace"]})
    if mpv_result.get("status") == "error":
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {mpv_result}")
        return jsonify({'status': 'error', 'message': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞'})
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if file_type == 'video':
        logger.info(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ: {os.path.basename(full_path)}")
        # –í–∫–ª—é—á–∞–µ–º –≤–∏–¥–µ–æ –≤—ã–≤–æ–¥ –∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –≤–∏–¥–µ–æ
        mpv_command({"command": ["set_property", "vid", "auto"]})  # –í–∫–ª—é—á–∞–µ–º –≤–∏–¥–µ–æ
        mpv_command({"command": ["set_property", "fullscreen", True]})
        mpv_command({"command": ["set_property", "vo", "gpu"]})  # GPU –≤—ã–≤–æ–¥ –¥–ª—è HDMI
    else:
        logger.info(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ: {os.path.basename(full_path)}")
        # –î–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –æ—Ç–∫–ª—é—á–∞–µ–º –≤–∏–¥–µ–æ –≤—ã–≤–æ–¥
        mpv_command({"command": ["set_property", "vid", "no"]})
    
    # –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° MPV - –ø–æ–ª—É—á–∞–µ–º duration –∏ volume
    time.sleep(0.5)
    
    # –ü–æ–ª—É—á–∞–µ–º duration —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DSF —Ñ–∞–π–ª–æ–≤
    raw_duration = None
    is_dsf_file = full_path.lower().endswith(('.dsf', '.dff'))
    
    # –î–ª—è DSF —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    retry_count = 10 if is_dsf_file else 5
    sleep_interval = 0.5 if is_dsf_file else 0.2
    
    for attempt in range(retry_count):
        raw_duration = get_mpv_property("duration")
        if raw_duration and raw_duration > 0:
            logger.info(f"üéµ MPV duration –ø–æ–ª—É—á–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt+1}: {raw_duration:.1f}s")
            break
        time.sleep(sleep_interval)
    
    # Fallback –¥–ª—è DSF —Ñ–∞–π–ª–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–µ–º ffprobe
    if not raw_duration and is_dsf_file:
        logger.info("üîç MPV –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å duration –¥–ª—è DSF, –ø—Ä–æ–±—É–µ–º ffprobe...")
        raw_duration = get_file_duration_ffprobe(full_path)
        if raw_duration:
            logger.info(f"‚úÖ FFprobe —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª duration: {raw_duration:.1f}s")
    
    if not raw_duration:
        raw_duration = 100.0
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å duration, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {raw_duration}s")
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –æ—Ç MPV –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mpv_volume = get_mpv_property("volume") or int(player_state['volume'] * 1.3)
    user_volume = int(mpv_volume / 1.3)  # –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    user_volume = max(0, min(100, user_volume))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    
    # –°–Ω–∏–º–∞–µ–º –ø–∞—É–∑—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    pause_state = get_mpv_property("pause")
    if pause_state:
        mpv_command({"command": ["set_property", "pause", False]})
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    player_state.update({
        'status': 'playing',
        'track': os.path.basename(full_path),
        'position': 0.0,
        'duration': raw_duration,
        'volume': user_volume,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        'playlist': playlist,
        'playlist_index': playlist_index
    })
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    global last_position_update
    last_position_update = time.time()
    
    logger.info(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: {player_state['track']}")
    emit_status_update()
    
    return jsonify({'status': 'ok'})

@app.route("/toggle_pause", methods=['POST'])
def toggle_pause():
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–∞—É–∑—É"""
    global player_state
    
    if player_state['status'] == 'stopped':
        return jsonify({'status': 'error', 'message': '–ü–ª–µ–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'})
    
    if not player_process or player_process.poll() is not None:
        return jsonify({'status': 'error', 'message': 'MPV –Ω–µ –∑–∞–ø—É—â–µ–Ω'})
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ MPV
    mpv_result = mpv_command({"command": ["cycle", "pause"]})
    if mpv_result.get("status") == "error":
        return jsonify({'status': 'error', 'message': '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã MPV'})
    
    # –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° MPV - –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã
    time.sleep(0.1)
    pause_state = get_mpv_property("pause")
    
    if pause_state is not None:
        if pause_state:
            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞—É–∑—É - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é —Å MPV
            current_position = get_mpv_property("time-pos")
            if current_position is not None and current_position >= 0:
                player_state['position'] = float(current_position)
            player_state['status'] = 'paused'
        else:
            # –°–Ω—è—Ç–∏–µ –ø–∞—É–∑—ã - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            global last_position_update
            last_position_update = time.time()
            player_state['status'] = 'playing'
    else:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—Ä—É—á–Ω—É—é
        if player_state['status'] == 'playing':
            player_state['status'] = 'paused'
        else:
            player_state['status'] = 'playing'
            last_position_update = time.time()
    
    logger.debug(f"–ü–∞—É–∑–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞: {player_state['status']}")
    emit_status_update()
    
    return jsonify({'status': 'ok'})

@app.route("/stop", methods=['POST'])
def stop():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
    global player_state
    
    stop_mpv_internal()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    player_state.update({
        'status': 'stopped',
        'track': '',
        'position': 0.0,
        'duration': 0.0,
        'playlist': [],
        'playlist_index': -1
    })
    
    logger.info("–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    emit_status_update()
    
    return jsonify({'status': 'ok'})

@app.route("/seek", methods=['POST'])
def seek():
    """–ü–µ—Ä–µ–º–æ—Ç–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é"""
    global player_state
    
    position = request.form.get('position', type=float)
    if position is None:
        return jsonify({'status': 'error', 'message': '–ü–æ–∑–∏—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
    if position < 0:
        position = 0
    if position > player_state['duration']:
        position = player_state['duration']
    
    logger.debug(f"–ü–µ—Ä–µ–º–æ—Ç–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: {position:.1f}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ MPV
    mpv_result = mpv_command({"command": ["seek", position, "absolute"]})
    if mpv_result.get("status") == "error":
        return jsonify({'status': 'error', 'message': '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã MPV'})
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
    player_state['position'] = position
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    global last_position_update
    last_position_update = time.time()
    
    emit_status_update()
    return jsonify({'status': 'ok'})

@app.route("/playlist_change", methods=['POST'])
def playlist_change():
    """–°–º–µ–Ω–∞ —Ç—Ä–µ–∫–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ"""
    direction = request.form.get('direction')
    logger.info(f"–°–º–µ–Ω–∞ —Ç—Ä–µ–∫–∞: {direction}")
    handle_playlist_change(direction)
    return jsonify({'status': 'ok'})

@app.route("/set_volume", methods=['POST'])
def set_volume():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π MPV"""
    user_volume = request.form.get('volume', 50, type=int)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    user_volume = max(0, min(100, user_volume))
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 0-100% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 0-200% MPV –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏
    # –ü—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö 0% -> MPV 0%, –ø—Ä–∏ 100% -> MPV 130% (–∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –º–∞–∫—Å–∏–º—É–º)
    mpv_volume = int(user_volume * 1.3)  # –ü—Ä–æ—Å—Ç–æ–µ –ª–∏–Ω–µ–π–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    logger.debug(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_volume}% -> MPV {mpv_volume}%")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ MPV
    mpv_command({"command": ["set_property", "volume", mpv_volume]})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    player_state['volume'] = user_volume
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    save_volume_setting(user_volume)
    
    return jsonify({'status': 'ok', 'user_volume': user_volume, 'mpv_volume': mpv_volume})

@app.route("/view_image", methods=['POST'])
def view_image():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    file_subpath = request.form.get('filepath')
    logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file_subpath}")
    
    full_path = os.path.join(MEDIA_ROOT, file_subpath)
    if os.path.isfile(full_path):
        command = ["sudo", "fbi", "-T", "1", "-a", "--noverbose", full_path]
        isolated_run(["sudo", "killall", "fbi"], check=False)
        from subprocess import DEVNULL
        isolated_popen(command, stdout=DEVNULL, stderr=DEVNULL)
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ: {os.path.basename(full_path)}")
    
    return jsonify({'status': 'ok'})

@app.route('/upload', methods=['POST'])
def upload_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    current_subpath = request.form.get('current_path', '')
    target_folder = os.path.join(MEDIA_ROOT, current_subpath)
    
    if not os.path.realpath(target_folder).startswith(os.path.realpath(MEDIA_ROOT)):
        abort(403)
    
    if 'files_to_upload' not in request.files:
        return jsonify({'status': 'error', 'message': 'No file part'}), 400
    
    files = request.files.getlist('files_to_upload')
    for file in files:
        if file and file.filename:
            filename = secure_filename(file.filename)
            save_path = os.path.join(target_folder, filename)
            file.save(save_path)
            if socketio:
                socketio.emit('file_uploaded', {'path': current_subpath, 'filename': filename})
    
    return jsonify({'status': 'success'})

@app.route('/create_folder', methods=['POST'])
def create_folder():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏"""
    current_subpath = request.form.get('current_path', '')
    new_folder_name = request.form.get('folder_name', '')
    
    if not new_folder_name:
        abort(400)
    
    folder_name = secure_filename(new_folder_name)
    target_folder = os.path.join(MEDIA_ROOT, current_subpath, folder_name)
    
    if not os.path.realpath(os.path.dirname(target_folder)).startswith(os.path.realpath(MEDIA_ROOT)):
        abort(403)
    
    try:
        os.makedirs(target_folder)
        if socketio:
            socketio.emit('folder_created', {'path': current_subpath, 'foldername': folder_name})
        return jsonify({'status': 'success'})
    except FileExistsError:
        return jsonify({'status': 'error', 'message': '–ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 409
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

def get_power_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏–µ–º –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        result = isolated_run(['python3', '/home/eu/aether-player/power-control.py', 'status'], check=False)
        
        if result.get('returncode') == 0:
            output = result.get('stdout', '')
            # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if "–í–ö–õ–Æ–ß–ï–ù–û" in output or "HIGH" in output:
                return "–í–∫–ª—é—á–µ–Ω–æ"
            else:
                return "–í—ã–∫–ª—é—á–µ–Ω–æ"
        else:
            return "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Ç–∞–Ω–∏—è: {e}")
        return "–û—à–∏–±–∫–∞"

# –ú–∞—Ä—à—Ä—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.route("/monitor")
def monitor_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
    import subprocess
    import glob
    import os
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
    try:
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU
        temp_result = subprocess.run(['cat', '/sys/class/thermal/thermal_zone0/temp'], capture_output=True, text=True)
        temp_celsius = float(temp_result.stdout.strip()) / 1000 if temp_result.returncode == 0 else 0
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
        disk_result = subprocess.run(['df', '-h', '/'], capture_output=True, text=True)
        disk_usage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if disk_result.returncode == 0:
            lines = disk_result.stdout.strip().split('\n')
            if len(lines) > 1:
                disk_usage = lines[1].split()[4]  # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç—å
        mem_result = subprocess.run(['free', '-m'], capture_output=True, text=True)
        memory_usage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if mem_result.returncode == 0:
            lines = mem_result.stdout.strip().split('\n')
            if len(lines) > 1:
                mem_data = lines[1].split()
                total_mem = int(mem_data[1])
                used_mem = int(mem_data[2])
                memory_usage = f"{round(used_mem/total_mem*100, 1)}%"
        
        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
        service_status = "–†–∞–±–æ—Ç–∞–µ—Ç (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)"
        try:
            service_result = subprocess.run(['systemctl', 'is-active', 'aether-player.service'], 
                                          capture_output=True, text=True)
            if service_result.returncode == 0 and service_result.stdout.strip() == 'active':
                service_status = "–†–∞–±–æ—Ç–∞–µ—Ç (systemd)"
            elif service_result.returncode != 0 and service_result.stdout.strip() in ['inactive', 'failed']:
                # –°–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤—Ä—É—á–Ω—É—é
                service_status = "–†–∞–±–æ—Ç–∞–µ—Ç (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)"
            else:
                service_status = "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        except:
            pass  # –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –æ—Å—Ç–∞–µ—Ç—Å—è "–†–∞–±–æ—Ç–∞–µ—Ç (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        temp_celsius = 0
        disk_usage = "–û—à–∏–±–∫–∞"
        memory_usage = "–û—à–∏–±–∫–∞"
        service_status = "–û—à–∏–±–∫–∞"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
    reports = []
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç—á–µ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø–∞–º—è—Ç–∏
        report_files = []
        report_files.extend(glob.glob('/tmp/aether-monitor-*.txt'))
        report_files.extend(glob.glob('/tmp/memory-report-*.txt'))
        
        report_files.sort(key=os.path.getmtime, reverse=True)
        for report_file in report_files[:10]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç—á–µ—Ç–æ–≤
            mtime = os.path.getmtime(report_file)
            reports.append({
                'file': os.path.basename(report_file),
                'time': subprocess.run(['date', '-d', f'@{mtime}', '+%d.%m.%Y %H:%M'], 
                                     capture_output=True, text=True).stdout.strip()
            })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    monitor_data = {
        'temperature': temp_celsius,
        'disk_usage': disk_usage,
        'memory_usage': memory_usage,
        'service_status': service_status,
        'reports': reports
    }
    
    return render_template('monitor.html', **monitor_data)

@app.route("/api/monitor")
def api_monitor():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
    import subprocess
    import glob
    import os
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã (–ø–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∏–∑ monitor_page)
    try:
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU
        temp_result = subprocess.run(['cat', '/sys/class/thermal/thermal_zone0/temp'], capture_output=True, text=True)
        temp_celsius = float(temp_result.stdout.strip()) / 1000 if temp_result.returncode == 0 else 0
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
        disk_result = subprocess.run(['df', '-h', '/'], capture_output=True, text=True)
        disk_usage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if disk_result.returncode == 0:
            lines = disk_result.stdout.strip().split('\n')
            if len(lines) > 1:
                disk_usage = lines[1].split()[4]  # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç—å
        mem_result = subprocess.run(['free', '-m'], capture_output=True, text=True)
        memory_usage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if mem_result.returncode == 0:
            lines = mem_result.stdout.strip().split('\n')
            if len(lines) > 1:
                mem_data = lines[1].split()
                total_mem = int(mem_data[1])
                used_mem = int(mem_data[2])
                memory_usage = f"{round(used_mem/total_mem*100, 1)}%"
        
        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
        service_status = "–†–∞–±–æ—Ç–∞–µ—Ç (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)"
        try:
            service_result = subprocess.run(['systemctl', 'is-active', 'aether-player.service'], 
                                          capture_output=True, text=True)
            if service_result.returncode == 0 and service_result.stdout.strip() == 'active':
                service_status = "–†–∞–±–æ—Ç–∞–µ—Ç (systemd)"
            elif service_result.returncode != 0 and service_result.stdout.strip() in ['inactive', 'failed']:
                # –°–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤—Ä—É—á–Ω—É—é
                service_status = "–†–∞–±–æ—Ç–∞–µ—Ç (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)"
            else:
                service_status = "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        except:
            pass  # –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –æ—Å—Ç–∞–µ—Ç—Å—è "–†–∞–±–æ—Ç–∞–µ—Ç (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        temp_celsius = 0
        disk_usage = "–û—à–∏–±–∫–∞"
        memory_usage = "–û—à–∏–±–∫–∞"
        service_status = "–û—à–∏–±–∫–∞"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
    reports = []
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç—á–µ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø–∞–º—è—Ç–∏
        report_files = []
        report_files.extend(glob.glob('/tmp/aether-monitor-*.txt'))
        report_files.extend(glob.glob('/tmp/memory-report-*.txt'))
        
        report_files.sort(key=os.path.getmtime, reverse=True)
        for report_file in report_files[:10]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç—á–µ—Ç–æ–≤
            mtime = os.path.getmtime(report_file)
            reports.append({
                'file': os.path.basename(report_file),
                'time': subprocess.run(['date', '-d', f'@{mtime}', '+%d.%m.%Y %H:%M'], 
                                     capture_output=True, text=True).stdout.strip()
            })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–∏—Ç–∞–Ω–∏—è –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏
    power_status = get_power_status()
    
    monitor_data = {
        'temperature': temp_celsius,
        'disk_usage': disk_usage,
        'memory_usage': memory_usage,
        'service_status': service_status,
        'power_status': power_status,
        'reports': reports
    }
    
    return jsonify(monitor_data)

@app.route("/monitor/report/<filename>")
def view_report(filename):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    import os
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å aether-monitor- –∏–ª–∏ memory-report- –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ .txt
    if not ((filename.startswith('aether-monitor-') or filename.startswith('memory-report-')) and 
            filename.endswith('.txt')) or '..' in filename:
        return "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞", 400
    
    report_path = f'/tmp/{filename}'
    if not os.path.exists(report_path):
        return "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    
    try:
        with open(report_path, 'r', encoding='utf-8') as f:
            content = f.read()
        return f"<pre style='font-family: monospace; background: #f5f5f5; padding: 20px;'>{content}</pre>"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}", 500

@app.route("/api/memory-analysis", methods=['POST'])
def memory_analysis():
    """–ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –ø–∞–º—è—Ç–∏
    logger.info("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏")
    try:
        import subprocess
        result = subprocess.run(
            ['python3', '/home/eu/aether-player/memory-monitor.py', '--save'], 
            capture_output=True, text=True, timeout=10
        )
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: returncode={result.returncode}")
        logger.info(f"stdout: {result.stdout}")
        logger.info(f"stderr: {result.stderr}")
        
        if result.returncode == 0:
            output = result.stdout.strip()
            if '–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:' in output:
                filename = output.split('–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ')[1].strip()
                return jsonify({
                    'status': 'success', 
                    'message': '–û—Ç—á–µ—Ç –æ –ø–∞–º—è—Ç–∏ —Å–æ–∑–¥–∞–Ω',
                    'report_path': filename
                })
            else:
                logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞: {output}")
                return jsonify({'status': 'error', 'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞'})
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: returncode={result.returncode}, stderr={result.stderr}")
            return jsonify({'status': 'error', 'error': f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏: {result.stderr}'})
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏: {e}")
        return jsonify({'status': 'error', 'error': f'–û—à–∏–±–∫–∞: {str(e)}'})

# ===== API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–µ—Ä–µ–æ—Å—Ü–µ–Ω–æ–π =====

@app.route("/api/audio-enhancement/presets", methods=['GET'])
def get_audio_enhancement_presets():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–µ—Ä–µ–æ—Å—Ü–µ–Ω—ã"""
    try:
        presets = audio_enhancer.get_all_presets()
        current_preset = player_state.get('audio_enhancement', 'off')
        
        return jsonify({
            'status': 'success',
            'presets': presets,
            'current': current_preset,
            'custom_settings': audio_enhancer.get_custom_settings()
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫: {e}")
        return jsonify({'status': 'error', 'error': str(e)})

@app.route("/api/audio-enhancement/apply", methods=['POST'])
def apply_audio_enhancement_api():
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–µ—Ä–µ–æ—Å—Ü–µ–Ω—ã"""
    try:
        preset_name = request.json.get('preset', 'off')
        
        if preset_name not in audio_enhancer.PRESETS:
            return jsonify({'status': 'error', 'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞'})
        
        success = apply_audio_enhancement(preset_name)
        
        if success:
            preset_info = audio_enhancer.get_preset_info(preset_name)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ª–∏ —á—Ç–æ-—Ç–æ
            is_playing = player_state.get('status') in ['playing', 'paused']
            
            if is_playing:
                message = f'–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞: {preset_info["name"]}'
            else:
                message = f'–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ "{preset_info["name"]}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏'
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
            if socketio:
                socketio.emit('audio_enhancement_changed', {
                    'preset': preset_name,
                    'preset_info': preset_info
                })
            
            return jsonify({
                'status': 'success',
                'message': message,
                'preset': preset_name,
                'preset_info': preset_info,
                'applied_immediately': is_playing
            })
        else:
            return jsonify({'status': 'error', 'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤'})
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ-—É–ª—É—á—à–µ–Ω–∏–π: {e}")
        return jsonify({'status': 'error', 'error': str(e)})

@app.route("/api/audio-enhancement/custom", methods=['POST'])
def update_custom_audio_enhancement():
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ-—É–ª—É—á—à–µ–Ω–∏–π"""
    try:
        settings = request.json.get('settings', {})
        
        updated = False
        for setting_name, value in settings.items():
            if audio_enhancer.update_custom_setting(setting_name, value):
                updated = True
        
        if updated:
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if player_state.get('audio_enhancement') == 'custom':
                apply_audio_enhancement('custom')
            
            return jsonify({
                'status': 'success',
                'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
                'custom_settings': audio_enhancer.get_custom_settings()
            })
        else:
            return jsonify({'status': 'error', 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'})
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return jsonify({'status': 'error', 'error': str(e)})

@app.route("/api/audio-enhancement/info/<preset_name>", methods=['GET'])
def get_audio_enhancement_info(preset_name):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    try:
        if preset_name not in audio_enhancer.PRESETS:
            return jsonify({'status': 'error', 'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞'})
        
        preset_info = audio_enhancer.get_preset_info(preset_name)
        filters = audio_enhancer.get_filter_chain(preset_name)
        
        from audio_enhancement import EFFECT_EXPLANATIONS
        
        return jsonify({
            'status': 'success',
            'preset_info': preset_info,
            'filters': filters,
            'explanations': EFFECT_EXPLANATIONS
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        return jsonify({'status': 'error', 'error': str(e)})

@app.route("/system/shutdown", methods=['POST'])
def system_shutdown():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ Raspberry Pi"""
    action = request.form.get('action', 'shutdown')
    
    if action == 'shutdown':
        logger.info("–ó–∞–ø—Ä–æ—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ–µ—Ä
        stop_mpv_internal()
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        isolated_run(['sync'], check=False)
        # –†–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–π –¥–∏—Å–∫
        isolated_run(['sudo', 'umount', '/mnt/hdd'], check=False)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
        isolated_run(['sudo', 'shutdown', '-h', '+1'], check=False)
        return jsonify({'status': 'ok', 'message': '–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É'})
    
    elif action == 'reboot':
        logger.info("–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ–µ—Ä
        stop_mpv_internal()
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        isolated_run(['sync'], check=False)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        isolated_run(['sudo', 'shutdown', '-r', '+1'], check=False)
        return jsonify({'status': 'ok', 'message': '–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É'})
    
    elif action == 'umount_hdd':
        logger.info("–†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–∏—Å–∫–∞")
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ–µ—Ä
        stop_mpv_internal()
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        isolated_run(['sync'], check=False)
        # –†–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ–º –¥–∏—Å–∫
        result = isolated_run(['sudo', 'umount', '/mnt/hdd'], check=False)
        if result.get('returncode') == 0:
            return jsonify({'status': 'ok', 'message': '–í–Ω–µ—à–Ω–∏–π –¥–∏—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω'})
        else:
            return jsonify({'status': 'error', 'message': '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–∏—Å–∫–∞'})
    
    else:
        return jsonify({'status': 'error', 'message': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'}), 400

@app.route("/system/power", methods=['POST'])
def system_power():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏"""
    action = request.form.get('action', '')
    
    if action == 'on':
        logger.info("–í–∫–ª—é—á–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏")
        result = isolated_run(['python3', '/home/eu/aether-player/power-control.py', 'on'], check=False)
        if result.get('returncode') == 0:
            return jsonify({'status': 'ok', 'message': '–ü–∏—Ç–∞–Ω–∏–µ –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏ –≤–∫–ª—é—á–µ–Ω–æ'})
        else:
            return jsonify({'status': 'error', 'message': '–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è'})
    
    elif action == 'off':
        logger.info("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏")
        result = isolated_run(['python3', '/home/eu/aether-player/power-control.py', 'safe-off'], check=False)
        if result.get('returncode') == 0:
            return jsonify({'status': 'ok', 'message': '–ü–∏—Ç–∞–Ω–∏–µ –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–æ'})
        else:
            return jsonify({'status': 'error', 'message': '–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è'})
    
    elif action == 'status':
        power_status = get_power_status()
        return jsonify({'status': 'ok', 'power_status': power_status})
    
    else:
        return jsonify({'status': 'error', 'message': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'}), 400

@app.route("/system/cancel-shutdown", methods=['POST'])
def cancel_shutdown():
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"""
    logger.info("–û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è")
    isolated_run(['sudo', 'shutdown', '-c'], check=False)
    return jsonify({'status': 'ok', 'message': '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'})

# WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
if socketio:
    @socketio.on('connect')
    def handle_connect():
        logger.info('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è')
        emit_status_update()

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ Aether Player (–ø—Ä–æ—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ALSA
    try:
        isolated_run(["sudo", "alsactl", "restore"], check=True)
        logger.info("ALSA –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ALSA: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º MPV
    ensure_mpv_is_running()
    
    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP-–º–µ—Ö–∞–Ω–∏–∑–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    # socketio.start_background_task(target=status_update_task)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    logger.info("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 5000")
    if socketio:
        socketio.run(app, host='0.0.0.0', port=5000, debug=False, allow_unsafe_werkzeug=True)
    else:
        app.run(host='0.0.0.0', port=5000, debug=False)
