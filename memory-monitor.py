#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è Aether Player
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏
"""

import subprocess
import os
from datetime import datetime

def get_memory_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏"""
    try:
        # –û–±—â–∞—è –ø–∞–º—è—Ç—å
        result = subprocess.run(['free', '-m'], capture_output=True, text=True)
        lines = result.stdout.strip().split('\n')
        mem_line = lines[1].split()
        
        total_mem = int(mem_line[1])
        used_mem = int(mem_line[2])
        free_mem = int(mem_line[3])
        available_mem = int(mem_line[6])
        
        return {
            'total': total_mem,
            'used': used_mem,
            'free': free_mem,
            'available': available_mem,
            'used_percent': round(used_mem / total_mem * 100, 1)
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: {e}")
        return None

def get_top_processes():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–∞–º—è—Ç–∏"""
    try:
        result = subprocess.run(['ps', 'aux', '--sort=-%mem'], capture_output=True, text=True)
        lines = result.stdout.strip().split('\n')[1:11]  # –¢–æ–ø 10
        
        processes = []
        for line in lines:
            parts = line.split(None, 10)
            if len(parts) >= 11:
                processes.append({
                    'pid': parts[1],
                    'mem_percent': float(parts[3]),
                    'mem_mb': int(float(parts[5]) / 1024),  # RSS –≤ MB
                    'command': parts[10][:60]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                })
        
        return processes
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return []

def get_aether_processes():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Aether Player"""
    try:
        result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
        lines = result.stdout.strip().split('\n')
        
        aether_processes = []
        for line in lines:
            if any(keyword in line.lower() for keyword in ['app.py', 'mpv', 'python3']):
                if 'grep' not in line and ('aether' in line or 'mpv' in line):
                    parts = line.split(None, 10)
                    if len(parts) >= 11:
                        aether_processes.append({
                            'pid': parts[1],
                            'mem_percent': float(parts[3]),
                            'mem_mb': int(float(parts[5]) / 1024),
                            'command': parts[10][:80]
                        })
        
        return aether_processes
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Aether –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return []

def format_memory_report():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø–∞–º—è—Ç–∏"""
    timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    report = f"\n{'='*80}\n"
    report += f"–û–¢–ß–ï–¢ –û –ü–ê–ú–Ø–¢–ò AETHER PLAYER - {timestamp}\n"
    report += f"{'='*80}\n\n"
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
    mem_info = get_memory_info()
    if mem_info:
        report += f"üìä –û–ë–©–ê–Ø –ü–ê–ú–Ø–¢–¨:\n"
        report += f"   –í—Å–µ–≥–æ:     {mem_info['total']:4d} MB\n"
        report += f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {mem_info['used']:4d} MB ({mem_info['used_percent']:5.1f}%)\n"
        report += f"   –°–≤–æ–±–æ–¥–Ω–æ:  {mem_info['free']:4d} MB\n"
        report += f"   –î–æ—Å—Ç—É–ø–Ω–æ:  {mem_info['available']:4d} MB\n\n"
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if mem_info['used_percent'] > 85:
            report += f"‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {mem_info['used_percent']}%\n\n"
        elif mem_info['used_percent'] > 75:
            report += f"‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {mem_info['used_percent']}%\n\n"
    
    # –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–∞–º—è—Ç–∏
    top_processes = get_top_processes()
    if top_processes:
        report += f"üîù –¢–û–ü-10 –ü–†–û–¶–ï–°–°–û–í –ü–û –ü–ê–ú–Ø–¢–ò:\n"
        report += f"{'PID':<8} {'–ú–ï–ú %':<8} {'–ú–ï–ú MB':<8} {'–ö–û–ú–ê–ù–î–ê':<60}\n"
        report += f"{'-'*8} {'-'*8} {'-'*8} {'-'*60}\n"
        
        for proc in top_processes:
            report += f"{proc['pid']:<8} {proc['mem_percent']:<8.1f} {proc['mem_mb']:<8} {proc['command']:<60}\n"
        report += "\n"
    
    # –ü—Ä–æ—Ü–µ—Å—Å—ã Aether Player
    aether_processes = get_aether_processes()
    if aether_processes:
        report += f"üéµ –ü–†–û–¶–ï–°–°–´ AETHER PLAYER:\n"
        report += f"{'PID':<8} {'–ú–ï–ú %':<8} {'–ú–ï–ú MB':<8} {'–ö–û–ú–ê–ù–î–ê':<80}\n"
        report += f"{'-'*8} {'-'*8} {'-'*8} {'-'*80}\n"
        
        total_aether_mem = 0
        for proc in aether_processes:
            report += f"{proc['pid']:<8} {proc['mem_percent']:<8.1f} {proc['mem_mb']:<8} {proc['command']:<80}\n"
            total_aether_mem += proc['mem_mb']
        
        report += f"\nüíæ –û–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ Aether Player: {total_aether_mem} MB\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if mem_info and mem_info['used_percent'] > 80:
        report += f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
        report += f"   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å VSCode –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏\n"
        report += f"   ‚Ä¢ –ó–∞–∫—Ä—ã—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ\n"
        report += f"   ‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è VSCode\n"
        report += f"   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –µ—Å–ª–∏ –ø–∞–º—è—Ç—å –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è\n\n"
    
    report += f"{'='*80}\n"
    
    return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(os.sys.argv) > 1 and os.sys.argv[1] == '--save':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report = format_memory_report()
        filename = f"/tmp/memory-report-{datetime.now().strftime('%Y%m%d-%H%M%S')}.txt"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(report)
            print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    else:
        # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        report = format_memory_report()
        print(report)

if __name__ == "__main__":
    main()
