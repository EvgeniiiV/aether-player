document.addEventListener('DOMContentLoaded', () => {
    console.log("[STARTUP] –ü—Ä–æ—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
    console.log("[STARTUP] –í–µ—Ä—Å–∏—è: 2.0.0 - Simple (28.07.2025)");
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let player_status = null;
    let isUserDragging = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    let lastUpdateTime = 0; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
    function clearActiveTrackIndicators() {
        document.querySelectorAll('.play-button.playing').forEach(button => {
            button.classList.remove('playing');
            button.textContent = '‚ñ∂Ô∏è Play';
        });
    }
    
    function setActiveTrackIndicator(trackPath, fromClick = false) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        let targetButton = document.querySelector(`.play-button[data-filepath="${trackPath}"]`);
        
        if (!targetButton) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
            const trackBasename = trackPath.split('/').pop().replace(/\.[^/.]+$/, "");
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É, —á–µ–π –ø—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–æ –∏–º—è
            const allButtons = document.querySelectorAll('.play-button');
            allButtons.forEach((btn) => {
                const btnBasename = btn.dataset.filepath.split('/').pop().replace(/\.[^/.]+$/, "");
                
                if (btnBasename.includes(trackBasename) || trackBasename.includes(btnBasename)) {
                    targetButton = btn;
                }
            });
        }
        
        if (!targetButton) {
            return;
        }
        
        // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
        document.querySelectorAll('.play-button.playing').forEach(button => {
            button.classList.remove('playing');
            button.textContent = '‚ñ∂Ô∏è Play';
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
        targetButton.classList.add('playing');
        targetButton.textContent = 'üéµ Playing';
    }
    
    // –î–µ—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–±–ª–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    function detectAndRecover(data) {
        // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–∏ —Ç–æ–º –∂–µ —Ç—Ä–µ–∫–µ
        if (data.state === 'stopped' && 
            player_status && 
            player_status.state === 'playing' && 
            player_status.track === data.track &&
            data.track !== '') {
            
            console.warn("[RECOVERY] –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞! –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...");
            console.warn(`[RECOVERY] –ë—ã–ª–æ: ${player_status.state} "${player_status.track}"`);
            console.warn(`[RECOVERY] –°—Ç–∞–ª–æ: ${data.state} "${data.track}"`);
            
            // –ü—Ä–æ–±—É–µ–º —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–ª–µ–µ—Ä
            fetch('/toggle_pause', { method: 'POST' })
                .then(response => response.json())
                .then(result => {
                    console.log("[RECOVERY] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:", result);
                    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    setTimeout(fetchStatus, 1000);
                })
                .catch(error => {
                    console.error("[RECOVERY] –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:", error);
                });
                
            return false; // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º UI —Å "–ø–ª–æ—Ö–∏–º–∏" –¥–∞–Ω–Ω—ã–º–∏
        }
        
        return true; // –î–∞–Ω–Ω—ã–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å UI
    }
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const nowPlayingInfo = document.getElementById('now-playing-info');
    const playPauseButton = document.getElementById('play-pause-button');
    const stopButton = document.getElementById('stop-button');
    let progressBar = document.getElementById('progress-bar'); // let –≤–º–µ—Å—Ç–æ const –¥–ª—è –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏
    const currentTimeSpan = document.getElementById('current-time');
    const totalTimeSpan = document.getElementById('total-time');
    const createFolderForm = document.getElementById('create-folder-form');
    const newFolderNameInput = document.getElementById('new-folder-name');
    const uploadForm = document.getElementById('upload-form');
    const fileInput = document.getElementById('file-input');
    const volumeSlider = document.getElementById('volume-slider');
    const volumePercent = document.getElementById('volume-percent');
    const prevButton = document.getElementById('prev-button');
    const nextButton = document.getElementById('next-button');

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å –ó–ê–©–ò–¢–û–ô –û–¢ –ó–ú–ï–ò
    function formatTime(seconds) {
        // –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (isNaN(seconds) || seconds === null || seconds === undefined) {
            console.warn(`[–ó–ê–©–ò–¢–ê –ó–ú–ï–ò] formatTime: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ${seconds} -> 0`);
            seconds = 0;
        }
        
        if (seconds < 0) {
            console.warn(`[–ó–ê–©–ò–¢–ê –ó–ú–ï–ò] formatTime: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ${seconds} -> 0`);
            seconds = 0;
        }
        
        if (seconds > 999999) { // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–≤–µ—Ä—Ö –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            console.warn(`[–ó–ê–©–ò–¢–ê –ó–ú–ï–ò] formatTime: —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ${seconds} -> 999999`);
            seconds = 999999;
        }
        
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–µ—Ä–µ–æ—Å—Ü–µ–Ω—ã
    function updateAudioEnhancementInfo(currentPreset) {
        const presetElement = document.getElementById('current-preset');
        if (!presetElement || !currentPreset) {
            return;
        }
        
        const presetNames = {
            'off': '–í—ã–∫–ª—é—á–µ–Ω–æ',
            'subtle': '–î–µ–ª–∏–∫–∞—Ç–Ω–æ–µ',
            'natural': '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ',
            'wide': '–®–∏—Ä–æ–∫–æ–µ',
            'speakers': '–ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫',
            'custom': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ'
        };
        
        const displayName = presetNames[currentPreset] || currentPreset;
        presetElement.textContent = displayName;
        
        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏
        const presetContainer = document.getElementById('audio-enhancement-info');
        if (presetContainer) {
            if (currentPreset === 'off') {
                presetContainer.style.color = '#666';
            } else {
                presetContainer.style.color = '#8af';
            }
        }
    }

    // –ü–†–û–°–¢–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI - –æ–¥–∏–Ω –≤ –æ–¥–∏–Ω —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª backend
    function updateUI(data) {
        const currentTime = Date.now();
        const timeSinceLastUpdate = lastUpdateTime ? currentTime - lastUpdateTime : 0;
        lastUpdateTime = currentTime;
        
        console.log(`[UI] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI (Œît=${timeSinceLastUpdate}ms):`, data);
        
        if (!data) {
            console.error("[ERROR] –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞");
            return;
        }
        
        // –ü–†–û–í–ï–†–ö–ê: –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
        if (!detectAndRecover(data)) {
            console.log("[UI] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã");
            return;
        }
        
        player_status = data;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
        if (data.state === 'stopped') {
            nowPlayingInfo.innerHTML = '<strong>–°—Ç–∞—Ç—É—Å:</strong> –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
            playPauseButton.textContent = '‚ñ∂Ô∏è';
            nowPlayingInfo.classList.remove('playing-indicator');
            
            // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
            clearActiveTrackIndicators();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progressBar.value = 0;
            progressBar.max = 100;
            currentTimeSpan.textContent = "00:00";
            totalTimeSpan.textContent = "00:00";
        } else {
            const stateText = data.state === 'playing' ? '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ' : '–ü–∞—É–∑–∞';
            const trackInfo = data.track || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
            
            nowPlayingInfo.innerHTML = `<strong>–°—Ç–∞—Ç—É—Å:</strong> ${stateText}<br><strong>–§–∞–π–ª:</strong> ${trackInfo}`;
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–°–ï–ì–î–ê –æ—á–∏—â–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤—ã—Ö
            clearActiveTrackIndicators();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (data.track && data.state === 'playing') {
                setActiveTrackIndicator(data.track, false);
            }
            
            if (data.state === 'playing') {
                nowPlayingInfo.classList.add('playing-indicator');
                playPauseButton.textContent = '‚è∏Ô∏è';
                playPauseButton.title = '–ü–∞—É–∑–∞';
            } else {
                nowPlayingInfo.classList.remove('playing-indicator');
                playPauseButton.textContent = '‚ñ∂Ô∏è';
                playPauseButton.title = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ';
            }
        }
        
        // –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ "–ó–ú–ï–ò" - –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        let position = parseFloat(data.position) || 0;
        let duration = parseFloat(data.duration) || 1;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if (isNaN(position) || position < 0) {
            console.warn(`[–ó–ê–©–ò–¢–ê –ó–ú–ï–ò] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: ${data.position} -> 0`);
            position = 0;
        }
        
        if (isNaN(duration) || duration < 1) {
            console.warn(`[–ó–ê–©–ò–¢–ê –ó–ú–ï–ò] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${data.duration} -> 1`);
            duration = 1;
        }
        
        // –ì–õ–ê–í–ù–ê–Ø –ó–ê–©–ò–¢–ê: –ø–æ–∑–∏—Ü–∏—è –ù–ò–ö–û–ì–î–ê –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if (position > duration) {
            console.warn(`[–ó–ê–©–ò–¢–ê –ó–ú–ï–ò] –ü–æ–∑–∏—Ü–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${position.toFixed(1)} > ${duration.toFixed(1)}, –∑–∞–∂–∏–º–∞–µ–º`);
            position = duration;
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–Ω—å—à–µ –ø–æ–∑–∏—Ü–∏–∏, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ—ë
        if (duration < position) {
            console.warn(`[–ó–ê–©–ò–¢–ê –ó–ú–ï–ò] –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–Ω—å—à–µ –ø–æ–∑–∏—Ü–∏–∏: ${duration.toFixed(1)} < ${position.toFixed(1)}, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º`);
            duration = position + 1;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ (–≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        currentTimeSpan.textContent = formatTime(position);
        totalTimeSpan.textContent = formatTime(duration);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –Ω–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ—Ç
        if (progressBar && !isUserDragging) {
            // –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ "–∑–º–µ–∏"
            const oldMax = parseFloat(progressBar.max) || 0;
            const oldValue = parseFloat(progressBar.value) || 0;
            
            console.log(`[DEBUG] –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä: old(${oldValue.toFixed(1)}/${oldMax.toFixed(1)}) -> new(${position.toFixed(1)}/${duration.toFixed(1)})`);
            
            // –ü–†–û–°–¢–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï - —Å–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç
            progressBar.max = duration;
            progressBar.value = Math.min(position, duration);
            
            const finalValue = parseFloat(progressBar.value);
            const finalMax = parseFloat(progressBar.max);
            
            if (finalValue > finalMax) {
                console.error(`[–ó–ê–©–ò–¢–ê –ó–ú–ï–ò] –ö–û–†–†–ï–ö–¶–ò–Ø: ${finalValue} -> ${finalMax}`);
                progressBar.value = finalMax;
            }
            
            console.log(`[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${finalValue.toFixed(1)}/${finalMax.toFixed(1)}`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
        if (typeof data.volume === 'number') {
            volumeSlider.value = data.volume;
            volumePercent.textContent = `${Math.round(data.volume)}%`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞—É–¥–∏–æ
        updateAudioEnhancementInfo(data.audio_enhancement);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞—É–¥–∏–æ
    function updateAudioEnhancementInfo(preset) {
        const currentPresetSpan = document.getElementById('current-preset');
        if (!currentPresetSpan) return;
        
        const presetNames = {
            'off': '–í—ã–∫–ª—é—á–µ–Ω–æ',
            'subtle': '–î–µ–ª–∏–∫–∞—Ç–Ω–æ–µ',
            'natural': '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ', 
            'wide': '–®–∏—Ä–æ–∫–æ–µ',
            'speakers': '–ö–æ–ª–æ–Ω–∫–∏',
            'custom': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ'
        };
        
        const displayName = presetNames[preset] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        currentPresetSpan.textContent = displayName;
        
        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏
        const audioEnhancementInfo = document.getElementById('audio-enhancement-info');
        if (audioEnhancementInfo) {
            if (preset === 'off') {
                audioEnhancementInfo.style.color = '#666';
            } else {
                audioEnhancementInfo.style.color = '#8af';
            }
        }
    }
    
    // –ü–†–û–°–¢–û–ô HTTP polling - 1 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
    let statusPollingInterval;
    
    function startStatusPolling() {
        console.log("[SYSTEM] –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ polling (500ms)");
        
        if (statusPollingInterval) {
            clearInterval(statusPollingInterval);
        }
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        fetchStatus();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª 500 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        statusPollingInterval = setInterval(fetchStatus, 500);
    }
    
    function fetchStatus() {
        const url = '/get_status?nocache=' + Math.random();
        const requestTime = Date.now();
        
        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                const responseTime = Date.now();
                const requestDuration = responseTime - requestTime;
                console.log(`[NETWORK] –°—Ç–∞—Ç—É—Å: ${data.state}, pos=${data.position?.toFixed(1)}, dur=${data.duration?.toFixed(1)} (–∑–∞–ø—Ä–æ—Å: ${requestDuration}ms)`);
                updateUI(data);
            })
            .catch(error => {
                console.error("[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", error);
            });
    }
    
    // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    console.log("[NETWORK] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å");
    
    fetch('/get_status')
        .then(response => response.json())
        .then(data => {
            console.log("[NETWORK] –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:", data);
            updateUI(data);
            startStatusPolling();
        })
        .catch(error => {
            console.error("[ERROR] –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:", error);
            setTimeout(startStatusPolling, 3000);
        });

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
    
    // –ö–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    document.querySelectorAll('.play-button').forEach(button => {
        button.addEventListener('click', function() {
            const filepath = this.dataset.filepath;
            const startTime = this.dataset.startTime; // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è CUE-—Ç—Ä–µ–∫–æ–≤
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é –æ—Ç –∫–ª–∏–∫–∞
            setActiveTrackIndicator(filepath, true);
            
            // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            let requestBody = `filepath=${encodeURIComponent(filepath)}`;
            if (startTime) {
                requestBody += `&start_time=${startTime}`;
            }
            
            fetch('/play', {
                method: 'POST',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                body: requestBody
            });
        });
    });

        // –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    document.querySelectorAll('.view-button').forEach(button => {
        button.addEventListener('click', function() {
            const filepath = this.dataset.filepath;
            console.log("[ACTION] –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", filepath);
            window.open(`/media/${encodeURIComponent(filepath)}`, '_blank');
        });
    });

    // –ö–Ω–æ–ø–∫–∏ —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    document.querySelectorAll('.text-button').forEach(button => {
        button.addEventListener('click', function() {
            const filepath = this.dataset.filepath;
            console.log("[ACTION] –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:", filepath);
            window.open(`/view_text/${encodeURIComponent(filepath)}`, '_blank');
        });
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–æ–º
    playPauseButton.addEventListener('click', () => {
        console.log("[ACTION] Play/Pause");
        fetch('/toggle_pause', { method: 'POST' })
            .then(response => response.json())
            .then(data => console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç toggle_pause:", data))
            .catch(error => console.error("–û—à–∏–±–∫–∞ toggle_pause:", error));
    });
    
    stopButton.addEventListener('click', () => {
        console.log("[ACTION] Stop");
        fetch('/stop', { method: 'POST' })
            .then(response => response.json())
            .then(data => console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç stop:", data))
            .catch(error => console.error("–û—à–∏–±–∫–∞ stop:", error));
    });

    // –ö–Ω–æ–ø–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    nextButton.addEventListener('click', () => {
        console.log("[ACTION] Next");
        fetch('/playlist_change', { 
            method: 'POST', 
            headers: {'Content-Type': 'application/x-www-form-urlencoded'}, 
            body: 'direction=next' 
        });
    });
    
    prevButton.addEventListener('click', () => {
        console.log("[ACTION] Previous");
        fetch('/playlist_change', { 
            method: 'POST', 
            headers: {'Content-Type': 'application/x-www-form-urlencoded'}, 
            body: 'direction=previous' 
        });
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
    let volumeTimeout;
    volumeSlider.addEventListener('input', function() {
        volumePercent.textContent = `${this.value}%`;
        clearTimeout(volumeTimeout);
        volumeTimeout = setTimeout(() => {
            fetch('/set_volume', {
                method: 'POST',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                body: `volume=${this.value}`
            });
        }, 50);
    });

    // –ü–†–û–°–¢–û–ï —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    if (progressBar) {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        progressBar.addEventListener('mousedown', function() {
            console.log("[SEEK] –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è");
            isUserDragging = true;
        });
        
        progressBar.addEventListener('touchstart', function() {
            console.log("[SEEK] –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è (touch)");
            isUserDragging = true;
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è - –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.addEventListener('mouseup', function() {
            if (isUserDragging) {
                console.log("[SEEK] –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è");
                isUserDragging = false;
                handleSeek();
            }
        });
        
        document.addEventListener('touchend', function() {
            if (isUserDragging) {
                console.log("[SEEK] –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è (touch)");
                isUserDragging = false;
                handleSeek();
            }
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        progressBar.addEventListener('change', function() {
            if (isUserDragging) {
                handleSeek();
            }
        });
        
        function handleSeek() {
                let newPosition = parseFloat(progressBar.value);
                const maxPosition = parseFloat(progressBar.max);
                
                // –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                if (isNaN(newPosition) || newPosition < 0) {
                    console.warn(`[–ó–ê–©–ò–¢–ê –ó–ú–ï–ò] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è seek: ${progressBar.value} -> 0`);
                    newPosition = 0;
                }
                
                if (newPosition > maxPosition) {
                    console.warn(`[–ó–ê–©–ò–¢–ê –ó–ú–ï–ò] –ü–æ–∑–∏—Ü–∏—è seek –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º: ${newPosition.toFixed(1)} > ${maxPosition.toFixed(1)}, –∑–∞–∂–∏–º–∞–µ–º`);
                    newPosition = maxPosition;
                }
                
                console.log(`[SEEK] –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –Ω–∞ ${newPosition.toFixed(1)} (–º–∞–∫—Å: ${maxPosition.toFixed(1)})`);
                
                fetch('/seek', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: `position=${newPosition}`
                })
                .then(response => response.json())
                .then(data => {
                    console.log("[SEEK] –†–µ–∑—É–ª—å—Ç–∞—Ç:", data);
                    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                    setTimeout(fetchStatus, 100);
                })
                .catch(error => {
                    console.error("[SEEK] –û—à–∏–±–∫–∞:", error);
                });
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
        progressBar.addEventListener('input', function() {
            currentTimeSpan.textContent = formatTime(parseFloat(this.value));
        });
    }

    // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
    createFolderForm.addEventListener('submit', function(event) {
        event.preventDefault();
        const folderName = newFolderNameInput.value;
        const currentPath = document.querySelector('h3').textContent.replace('–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: /', '');
        
        if (folderName) {
            const formData = new FormData();
            formData.append('current_path', currentPath);
            formData.append('folder_name', folderName);
            
            fetch('/create_folder', { method: 'POST', body: formData })
                .then(response => {
                    if (response.ok) {
                        setTimeout(() => location.reload(), 500);
                    }
                });
            
            newFolderNameInput.value = '';
        }
    });

    // –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    uploadForm.addEventListener('submit', function(event) {
        event.preventDefault();
        const files = fileInput.files;
        const currentPath = document.querySelector('h3').textContent.replace('–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: /', '');
        
        if (files.length > 0) {
            const formData = new FormData();
            formData.append('current_path', currentPath);
            
            for (let i = 0; i < files.length; i++) {
                formData.append('files_to_upload', files[i]);
            }
            
            fetch('/upload', { method: 'POST', body: formData })
                .then(response => {
                    if (response.ok) {
                        setTimeout(() => location.reload(), 500);
                    }
                });
            
            fileInput.value = '';
        }
    });
});
