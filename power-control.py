#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏–µ–º –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏ Aether Player (v6.0)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É RPi.GPIO –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ª–µ 220–í
"""

import RPi.GPIO as GPIO
import time
import sys
import os
import signal
import subprocess
import json
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
POWER_GPIO = 18  # GPIO –ø–∏–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ª–µ (BCM –Ω—É–º–µ—Ä–∞—Ü–∏—è) - –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–û –ù–ê GPIO18!
PIDFILE = "/home/eu/aether-player/aether-power-gpio.pid"
STATUSFILE = "/home/eu/aether-player/aether-power-status.json"

class PowerControl:
    def __init__(self):
        self.gpio_pin = POWER_GPIO
        self.is_initialized = False
        self.power_state = False
        
    def init_gpio(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPIO"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π
            try:
                GPIO.cleanup()
            except:
                pass
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º BCM (Broadcom SOC channel)
            GPIO.setmode(GPIO.BCM)
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–∏–Ω–∞—Ö
            GPIO.setwarnings(False)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∏–Ω –∫–∞–∫ –≤—ã—Ö–æ–¥
            GPIO.setup(self.gpio_pin, GPIO.OUT)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ LOW (–≤—ã–∫–ª—é—á–µ–Ω–æ)
            GPIO.output(self.gpio_pin, GPIO.LOW)
            
            self.is_initialized = True
            self.power_state = False
            print(f"GPIO {self.gpio_pin} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"–û–®–ò–ë–ö–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GPIO: {e}")
            return False
    
    def power_on(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏"""
        if not self.is_initialized:
            if not self.init_gpio():
                return False
        
        try:
            print("=== –í–∫–ª—é—á–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏ ===")
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–ª–µ 5–í, –∞ RPi –≤—ã–¥–∞—ë—Ç 3.3–í!")
            print("   –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ–ø—Ç–æ–ø–∞—Ä—É –∏–ª–∏ —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä")
            print("")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º GPIO –≤ HIGH (3.3V)
            GPIO.output(self.gpio_pin, GPIO.HIGH)
            self.power_state = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            time.sleep(0.1)
            actual_state = GPIO.input(self.gpio_pin)
            
            if actual_state:
                print(f"–£–°–ü–ï–•: GPIO –≤–∫–ª—é—á–µ–Ω")
                print(f"GPIO {self.gpio_pin} = HIGH (3.3V)")
                print("üí° –î–ª—è —Ä–µ–ª–µ 5–í –Ω—É–∂–Ω–∞ –æ–ø—Ç–æ–ø–∞—Ä–∞ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞")
                self.save_status()
                self.log_event("GPIO –≤–∫–ª—é—á–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–æ–ø–∞—Ä—ã –¥–ª—è —Ä–µ–ª–µ 5–í)")
                return True
            else:
                print(f"–û–®–ò–ë–ö–ê: GPIO {self.gpio_pin} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –≤ HIGH")
                return False
                
        except Exception as e:
            print(f"–û–®–ò–ë–ö–ê –≤–∫–ª—é—á–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è: {e}")
            return False
    
    def power_off(self):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏"""
        if not self.is_initialized:
            if not self.init_gpio():
                return False
        
        try:
            print("=== –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏ ===")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º GPIO –≤ LOW (0V)
            GPIO.output(self.gpio_pin, GPIO.LOW)
            self.power_state = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            time.sleep(0.1)
            actual_state = GPIO.input(self.gpio_pin)
            
            if not actual_state:
                print(f"–£–°–ü–ï–•: –ü–∏—Ç–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
                print(f"GPIO {self.gpio_pin} = LOW (0V)")
                self.save_status()
                self.log_event("–ü–∏—Ç–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
                return True
            else:
                print(f"–û–®–ò–ë–ö–ê: GPIO {self.gpio_pin} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –≤ LOW")
                return False
                
        except Exception as e:
            print(f"–û–®–ò–ë–ö–ê –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è: {e}")
            return False
    
    def status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        print("=== –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã ===")
        
        if not self.is_initialized:
            self.init_gpio()
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GPIO
            actual_state = GPIO.input(self.gpio_pin)
            
            if actual_state:
                print(f"GPIO: –í–ö–õ–Æ–ß–ï–ù (GPIO {self.gpio_pin} = HIGH)")
                print("–£—Ä–æ–≤–µ–Ω—å GPIO: 3.3V")
                print("–°—Ç–∞—Ç—É—Å —Ä–µ–ª–µ: –ó–ê–í–ò–°–ò–¢ –û–¢ –û–ü–¢–û–ü–ê–†–´")
                print("‚ö†Ô∏è  –†–µ–ª–µ 5–í —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–æ–ø–∞—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!")
            else:
                print(f"GPIO: –í–´–ö–õ–Æ–ß–ï–ù (GPIO {self.gpio_pin} = LOW)")
                print("–£—Ä–æ–≤–µ–Ω—å GPIO: 0V") 
                print("–°—Ç–∞—Ç—É—Å —Ä–µ–ª–µ: –í–´–ö–õ–Æ–ß–ï–ù–û")
            
            print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {'–î–ê' if self.is_initialized else '–ù–ï–¢'}")
            print(f"–†–µ–∂–∏–º GPIO: BCM")
            print(f"–ü–∏–Ω: GPIO {self.gpio_pin} (—Ñ–∏–∑–∏—á–µ—Å–∫–∏–π pin 37)")
            
            print("")
            print("üîå –°—Ö–µ–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–ª–µ 5–í:")
            print("RPi 3.3V ‚Üí –û–ø—Ç–æ–ø–∞—Ä–∞ ‚Üí –¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä ‚Üí –†–µ–ª–µ 5–í")
            print("")
            print("–£–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
            print("‚Ä¢ –£—Å–∏–ª–∏—Ç–µ–ª—å –∑–≤—É–∫–∞")
            print("‚Ä¢ –í–Ω–µ—à–Ω–∏–π HDD")
            print("‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–∏—Ñ–µ—Ä–∏—è")
            
            return actual_state
            
        except Exception as e:
            print(f"–û–®–ò–ë–ö–ê —á—Ç–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return None
    
    def safe_power_off(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å –æ—Ç–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º USB"""
        print("=== –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ ===")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Aether Player
        print("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Aether Player...")
        try:
            subprocess.run(["sudo", "pkill", "-f", "python.*app"], 
                         timeout=5, capture_output=True)
            subprocess.run(["sudo", "pkill", "-f", "mpv"], 
                         timeout=5, capture_output=True)
            time.sleep(2)
        except subprocess.TimeoutExpired:
            print("–¢–∞–π–º–∞—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        
        # –û—Ç–º–æ–Ω—Ç–∏—Ä—É–µ–º USB –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏
        print("–û—Ç–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ USB –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–µ–π...")
        try:
            result = subprocess.run(["mount"], capture_output=True, text=True)
            usb_mounts = [line.split()[0] for line in result.stdout.split('\n') 
                         if '/dev/sd' in line]
            
            if usb_mounts:
                for device in usb_mounts:
                    print(f"–û—Ç–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {device}...")
                    subprocess.run(["sudo", "umount", device], 
                                 timeout=10, capture_output=True)
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
                subprocess.run(["sync"], timeout=5)
                time.sleep(2)
                print("USB –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏ –æ—Ç–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                print("USB –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        # –í—ã–∫–ª—é—á–∞–µ–º –ø–∏—Ç–∞–Ω–∏–µ
        return self.power_off()
    
    def test_relay(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–µ"""
        print("=== –¢–ï–°–¢ –†–ï–õ–ï ===")
        print("")
        
        print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPIO:")
        if not self.init_gpio():
            print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GPIO")
            return False
        print("")
        
        print("2. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        self.status()
        print("")
        
        print("3. –¢–µ—Å—Ç –≤–∫–ª—é—á–µ–Ω–∏—è (3 —Å–µ–∫):")
        if self.power_on():
            time.sleep(3)
            print("–í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        else:
            print("–û–®–ò–ë–ö–ê –≤–∫–ª—é—á–µ–Ω–∏—è")
            return False
        print("")
        
        print("4. –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è:")
        state = self.status()
        print("")
        
        print("5. –¢–µ—Å—Ç –≤—ã–∫–ª—é—á–µ–Ω–∏—è:")
        if self.power_off():
            time.sleep(1)
            print("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        else:
            print("–û–®–ò–ë–ö–ê –≤—ã–∫–ª—é—á–µ–Ω–∏—è")
        print("")
        
        print("6. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        self.status()
        print("")
        
        print("=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===")
        print(f"–ü–†–û–í–ï–†–¨–¢–ï –º—É–ª—å—Ç–∏–º–µ—Ç—Ä–æ–º GPIO {self.gpio_pin} (pin 37):")
        print("‚Ä¢ –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏: 3.3V –Ω–∞ GPIO")
        print("‚Ä¢ –ü—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: 0V –Ω–∞ GPIO")
        print("")
        print("‚ö†Ô∏è  –î–õ–Ø –†–ï–õ–ï 5–í –ù–£–ñ–ù–ê –°–•–ï–ú–ê –£–°–ò–õ–ï–ù–ò–Ø:")
        print("RPi GPIO 3.3V ‚Üí –û–ø—Ç–æ–ø–∞—Ä–∞/–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä ‚Üí –†–µ–ª–µ 5V")
        print("")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("‚Ä¢ –û–ø—Ç–æ–ø–∞—Ä–∞ PC817 –∏–ª–∏ –∞–Ω–∞–ª–æ–≥")
        print("‚Ä¢ –¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä 2N2222 –∏–ª–∏ BC547")
        print("‚Ä¢ –†–µ–∑–∏—Å—Ç–æ—Ä 220-330 –û–º")
        
        return True
    
    def save_status(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            status_data = {
                "gpio_pin": self.gpio_pin,
                "power_state": self.power_state,
                "timestamp": time.time(),
                "initialized": self.is_initialized
            }
            
            with open(STATUSFILE, 'w') as f:
                json.dump(status_data, f)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def log_event(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        try:
            subprocess.run(["logger", f"Aether Player: {message} (GPIO {self.gpio_pin})"])
        except:
            pass
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ GPIO –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            if self.is_initialized:
                # –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º LOW –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                GPIO.output(self.gpio_pin, GPIO.LOW)
                time.sleep(0.1)
                GPIO.cleanup()
                print("GPIO –æ—á–∏—â–µ–Ω")
                
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
            for filepath in [PIDFILE, STATUSFILE]:
                if os.path.exists(filepath):
                    os.remove(filepath)
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π lgpio —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            lgd_file = "/home/eu/aether-player/.lgd-nfy0"
            if os.path.exists(lgd_file):
                try:
                    os.remove(lgd_file)
                    print("–§–∞–π–ª .lgd-nfy0 —É–¥–∞–ª–µ–Ω")
                except:
                    pass
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    power_control.cleanup()
    sys.exit(0)

def daemon_mode():
    """–†–µ–∂–∏–º –¥–µ–º–æ–Ω–∞ –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è GPIO"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
    with open(PIDFILE, 'w') as f:
        f.write(str(os.getpid()))
    
    print(f"–î–µ–º–æ–Ω –∑–∞–ø—É—â–µ–Ω (PID: {os.getpid()})")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: power-control.py off")
    
    try:
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        pass
    finally:
        power_control.cleanup()

def main():
    global power_control
    power_control = PowerControl()
    
    if len(sys.argv) < 2:
        print("–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏–µ–º Aether Player v6.0 (Python)")
        print("")
        print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É RPi.GPIO –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GPIO")
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –î–ª—è —Ä–µ–ª–µ 5–í —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–æ–ø–∞—Ä–∞/—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä!")
        print("")
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("  on, start    - –í–∫–ª—é—á–∏—Ç—å GPIO (3.3V)")
        print("  off, stop    - –í—ã–∫–ª—é—á–∏—Ç—å GPIO (0V)")
        print("  safe-off     - –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å —Å –æ—Ç–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        print("  status       - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ GPIO")
        print("  test         - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å GPIO")
        print("  daemon       - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞")
        print("  cleanup      - –û—á–∏—Å—Ç–∏—Ç—å GPIO")
        print("")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  sudo python3 power-control.py on")
        print("  sudo python3 power-control.py status")
        print("  sudo python3 power-control.py test")
        print("")
        print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: RPi Pin 37 (GPIO {POWER_GPIO}) ‚Üí –û–ø—Ç–æ–ø–∞—Ä–∞ ‚Üí –†–µ–ª–µ 5–í")
        print("–°—Ö–µ–º–∞: RPi 3.3V ‚Üí PC817 ‚Üí 2N2222 ‚Üí –†–µ–ª–µ 5V")
        print("")
        return
    
    command = sys.argv[1].lower()
    
    try:
        if command in ['on', 'start', 'enable']:
            success = power_control.power_on()
            # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω - GPIO –¥–µ—Ä–∂–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–º –ø–æ —Å–µ–±–µ
            sys.exit(0 if success else 1)
            
        elif command in ['off', 'stop', 'disable']:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–º–æ–Ω –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
            if os.path.exists(PIDFILE):
                with open(PIDFILE, 'r') as f:
                    pid = int(f.read().strip())
                try:
                    os.kill(pid, signal.SIGTERM)
                    time.sleep(0.5)
                except ProcessLookupError:
                    pass
            
            success = power_control.power_off()
            sys.exit(0 if success else 1)
            
        elif command in ['safe-off', 'safe-stop']:
            success = power_control.safe_power_off()
            sys.exit(0 if success else 1)
            
        elif command in ['status', 'check', 'state']:
            power_control.status()
            
        elif command in ['test', 'debug']:
            success = power_control.test_relay()
            sys.exit(0 if success else 1)
            
        elif command == 'daemon':
            power_control.init_gpio()
            daemon_mode()
            
        elif command in ['cleanup', 'clean']:
            power_control.cleanup()
            
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        power_control.cleanup()
        sys.exit(1)
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê: {e}")
        power_control.cleanup()
        sys.exit(1)

if __name__ == "__main__":
    main()
